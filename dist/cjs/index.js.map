{"version":3,"file":"index.js","sources":["../../src/components/mermaiddiagram/MermaidDiagram.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport mermaid, {RenderResult} from 'mermaid';\nimport {MermaidDiagramProps} from \"./MermaidDiagram.types\";\nimport React from \"react\";\n\nconst MermaidDiagram = (props: MermaidDiagramProps) => {\n    const [element, setElement] = useState<HTMLDivElement>();\n    const [render_result, setRenderResult] = useState<RenderResult>();\n\n    const container_id = `${props.id || 'd' + Date.now()}-mermaid`;\n    const diagram_text = props.children;\n\n    // initialize mermaid here, but beware that it gets called once for every instance of the component\n    useEffect(() => {\n        // wait for page to load before initializing mermaid\n        mermaid.initialize({\n            startOnLoad: true,\n            // securityLevel: \"loose\",\n            // theme: \"forest\",\n            logLevel: 5\n        });\n    },[]);\n\n    // hook to track updates to the component ref, compatible with useEffect unlike useRef\n    const updateDiagramRef = useCallback((elem: HTMLDivElement) => {\n        if (!elem) return;\n        setElement(elem);\n    }, []);\n\n    // hook to update the component when either the element or the rendered diagram changes\n    useEffect(() => {\n        if (!element) return;\n        if (!render_result?.svg) return;\n        element.innerHTML = render_result.svg;\n        render_result.bindFunctions?.(element);\n    }, [\n        element,\n        render_result\n    ]);\n\n    // hook to handle the diagram rendering\n    useEffect(() => {\n        if (!diagram_text && diagram_text.length === 0) return;\n        // create async function inside useEffect to cope with async mermaid.run\n        (async () => {\n            try {\n                const rr = await mermaid.render(`${container_id}-svg`, diagram_text);\n                setRenderResult(rr);\n            } catch (e: any) {\n                props.onError?.(e);\n            }\n        })();\n    }, [\n        diagram_text\n    ]);\n\n    // render container (div) to hold diagram (nested SVG)\n    return (\n        <div className={props.className}\n             onClick={props.onClick}\n             id={container_id}\n             data-testid={props.testId}\n             ref={updateDiagramRef}\n        />\n    );\n}\n\nexport { MermaidDiagram };"],"names":["props","element","setElement","useState","render_result","setRenderResult","container_id","id","Date","now","diagram_text","children","useEffect","mermaid","initialize","startOnLoad","logLevel","updateDiagramRef","useCallback","elem","svg","innerHTML","bindFunctions","length","rr","render","e","onError","React","createElement","className","onClick","testId","ref"],"mappings":"gFAKwBA,IACpB,MAAOC,EAASC,GAAcC,EAAQA,YAC/BC,EAAeC,GAAmBF,EAAQA,WAE3CG,EAAe,GAAGN,EAAMO,IAAM,IAAMC,KAAKC,gBACzCC,EAAeV,EAAMW,SAG3BC,EAAAA,WAAU,KAENC,EAAQC,WAAW,CACfC,aAAa,EAGbC,SAAU,GACZ,GACJ,IAGF,MAAMC,EAAmBC,eAAaC,IAC7BA,GACLjB,EAAWiB,EAAK,GACjB,IA8BH,OA3BAP,EAAAA,WAAU,KACDX,GACAG,GAAegB,MACpBnB,EAAQoB,UAAYjB,EAAcgB,IAClChB,EAAckB,gBAAgBrB,GAAQ,GACvC,CACCA,EACAG,IAIJQ,EAAAA,WAAU,MACDF,GAAwC,IAAxBA,EAAaa,SAElC,WACI,IACI,MAAMC,QAAWX,EAAQY,OAAO,GAAGnB,QAAoBI,GACvDL,EAAgBmB,EACnB,CAAC,MAAOE,GACL1B,EAAM2B,UAAUD,EACnB,CACJ,EAPD,EAOI,GACL,CACChB,IAKAkB,EAAKC,cAAA,MAAA,CAAAC,UAAW9B,EAAM8B,UACjBC,QAAS/B,EAAM+B,QACfxB,GAAID,EACS,cAAAN,EAAMgC,OACnBC,IAAKhB,GAEZ"}